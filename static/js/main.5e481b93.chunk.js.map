{"version":3,"sources":["Appbar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","biodata","diplay","flexDirection","justifyContent","alignItems","backgroundColor","height","color","details","minHeight","margin","DenseAppBar","classes","className","AppBar","position","style","background","Toolbar","variant","IconButton","edge","aria-label","Typography","Grid","container","item","xs","textAlign","paddingTop","marginBottom","Divider","marginTop","fontSize","paddingRight","fontWeight","marginLeft","Button","size","button","startIcon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e481b93.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Grid, Divider, Button } from '@material-ui/core';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport CallEndIcon from '@material-ui/icons/CallEnd';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n\n  biodata: {\n      diplay:'flex',\n      flexDirection:'column',\n      justifyContent:'center',\n      alignItems:'end',\n      backgroundColor:'#8345C8',\n      height:120,\n      color:'#FCFCFC',\n      \n  },\n  details: {\n      minHeight:'100%',\n      margin:30\n  }\n}));\n\nexport default function DenseAppBar() {\n  const classes = useStyles();\n  //https://www.youtube.com/watch?v=1Y-PqBH-htk\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ background: '#8345C8' }}>\n        <Toolbar variant=\"dense\">\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\"  color=\"inherit\">\n            Stockist Biodata Scanner\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={0}>\n          <Grid item xs={12}>\n            <div className={classes.biodata}>\n            <Typography style={{textAlign:'center', paddingTop:30}} variant=\"h6\" > Timi Balogun </Typography>\n            <Typography style={{textAlign:'center'}} variant=\"body1\" color=\"inherit\">Stockist </Typography>\n            </div>\n          </Grid>\n\n          <Grid item xs={1}></Grid>\n          <Grid item xs={10} className={classes.details}>\n              <Typography color=\"textSecondary\" variant=\"body1\"><b>Membership Code:</b> NG000001</Typography>\n              <Typography color=\"textSecondary\" variant=\"body1\"><b>Address: </b> 12 Balogun street, Ikeja Lagos</Typography>\n              <Typography color=\"textSecondary\" variant=\"body1\"><b>Stockist Code: </b> NGXXXX01</Typography>\n              <Typography color=\"textSecondary\" variant=\"body1\"><b>Year of joining:</b> 2019</Typography>\n              <Typography color=\"textSecondary\" variant=\"body1\" style={{marginBottom:20}}><b>Staff/Contact name: </b> Victoria Abu</Typography>\n\n              <Divider />\n              <Grid item container style={{marginTop:20}}>\n              <Grid item xs={1}>\n                <PhoneIcon fontSize=\"small\" style={{marginTop:10, paddingRight:50}} />\n              </Grid>\n              <Grid item xs={11}>\n                <Typography variant=\"body1\" style={{ marginBottom:0, fontWeight:400}}>  08023008263</Typography>\n                <Typography color=\"textSecondary\" variant=\"body2\" style={{ marginBottom:20}}> Mobile </Typography>\n              </Grid>\n            </Grid>\n\n            <Divider />\n              <Grid item container style={{marginTop:20}}>\n              <Grid item xs={1}>\n                <CallEndIcon fontSize=\"small\" style={{marginTop:10, paddingRight:50}} />\n              </Grid>\n              <Grid item xs={11}>\n                <Typography variant=\"body1\" style={{ marginBottom:0, fontWeight:400}}>  2341-27065330</Typography>\n                <Typography color=\"textSecondary\" variant=\"body2\" style={{ marginLeft:0}}> Telephone</Typography>\n              </Grid>\n            </Grid>\n            <br></br><br></br>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                className={classes.button}\n                startIcon={<PhoneIcon />}\n                style={{backgroundColor:'#8345C8'}}\n            >\n                Call\n            </Button>\n\n          </Grid>\n          <Grid item xs={1}></Grid>\n\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Appbar from './Appbar'\n\nfunction App() {\n  return (\n    <div>\n    \n       \n        <p>\n         <Appbar></Appbar>\n         \n\n        </p>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}